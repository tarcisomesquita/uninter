
A01_P01
sumário

A01_P02
Estruturas de banco de dados NoSql: armazenamento em chave-valor, armazenamento em documentos, família de colunas, orientado a grafos

quando é em tabelas pode ficar várias células com valor null

representaddos em xml, json, bison

noSQL versus relacional: depende do problema que quer resolver

controle de estoque > relacional
postagens em um fórum > noSQL

A01_P03
disponibilidade (usa vários servidores, então o sistema não para se uma máquina parar)
escabilidade:
  - vertical: aumentar RAM e potência do processador
  - horizontal: aumentar a quantidade de servidores

Teorema CAP
Manter consistência após operação
Disponibilidade (manter em operação)
Tolerância a partições

A01_P04
Modelo de dados
não especifica tipo de variáveis

integridade: no relacional, se um valor é usado, o sistema não deixa excluí-lo.

nosql não evita repetição de dados

relacional requer mais processamento e permite consultas mais complexas

A01_P05
Modelo de dado agregado

Não há uma definição sobre como os dados são agregados: guardados em um documento ou dividido em vários.

A01_P06
Distribuição dos dados em vários servidores e consistência

pode fragmentar ou replicar os dados por servidores

fragmentar > exemplo de organizar alfabeticamente os dados em fichários
replicação: mestre-escravo (apenas leitura), ponto a ponto (todos são mestres e compartilham os dados)
concorrência: pessimista ou otimista

A02_P01
sumário

A02_P02
chava-valor

precisa conhecer a chave para fazer consulta.
não consegue fazer consulta por valor

DynamoDB> nuvem
Redis> local

A02_P03
DynamoDB é da AWS (Amazon Web Services), é orientado a chave-valor e a documentos

custo é por número de acessos

tem time-to-live: quanto tempo um dado será guardado

acesso:
AWS console
AWS cli
AWS SDK
API

tabela, chave primária, linhas>itens, colunas>atributos

obrigatório um campo como chave primária. Pode ter até 2 campos.

scalar type: string, number, boolen, binary, null
set type: um array de um scalar typer
document type: um array com diferentes scalar type. Aceita array vazio, mas não com dados vazio ["", ""], {"nome": ""}
é como um objeto

A02_P04
https://aws.amazon.com/pt/console
criou uma tabela e adicionou um item

A02_P05
leitura
 - EC (eventualmente consistente). Pega dados em um cache. Não é o mais atual.
 - FC (fortemente consistente). Lê diretamente da tabela. É mais lento

RCU (Read Capacity Unit)
1 RCU FC = 1 leitura por segundo
1 RCU EC = 2 leitura por segundo

1 RCU = bloco 4kB
1 WCU = bloco 1kB

ver quantos bytes tem uma entrada a ser escrita. Não deve passar os 5 WCU provisionados gratuitamente.

escabilidade: pode mudar 4 vezes ao dia

A02_P06
casos de uso
situações que não exijam integridade de dados, tenha grande voluma, e alta quantidade de acessos
-carrinho de compras em site eletrônico
-aplicativos orientados por sessão: armazenar dados por vez que fez login.

A07
DynamoDB e glitch e nodejs

AWS IAM service: configurar acesso

A03_P01
sumário

A03_P02
em nosql não se aplica as regras de normalização
não tem join em busca
usa json

em chave-valor, busca pela chave
em documentos, pode buscar pela chave ou pelo valor

se preocupa mais com a leitura e a apresentação do resultado da busca

no modelo relacional temos atributos (colunas), no nosql temos chaves

modelagem incorporada: um único arquivo
modelagem referenciada: armazena os dados em vários documentos, há referência de um para outro, menor desempenho em consulta.

A03_P3
banco de dados tem coleções que tem documentos
tipos de dados: string, boolean, integer, double, array, null

www.mongodb.com

A03_P04
CRUD
Create Read Update Delete
insert()  find() update() delete()

use vendas # cria se ainda não existir
db.getName()

db.coleção.insertOne()   # coleção também é criada automaticamente
db.coleção.insertMany()

db.clientes.insertOne(
  {
    nome: "Alex",
    endereco: "Rua das avenidas, 288",
    idade: 18
  }
)

db.clientes.find({idade: 18})
db.clientes.find({idade: {$gt: 18}})

gt, gte, lt, lte

db.coleção.updateOne()
db.coleção.updateMany()

db.clientes.updateOne({nome: "Alex"}, {$set: {idade: 25}})

db.coleção.deleteOne()
db.coleção.deleteMany()

db.clientes.deleteMany({idade: 25})

A03_P05
heartbeat: checagem se os nodos estão funcionando

checa consistência por documento, não por dado

A03_P06
Usos
- armazenamento de páginas da web
- catálogo de documentos de uma empresa
- inventário de um e-commerce
- blogs
- plataformas de vídeo
- respostas em um fórum

A04_P01
Estrutura orientado a colunas
sumário

A04_P02
mais complexo que os demais NoSQL
cada registro possui suas colunas específicas, mas se não tiver o dado, não cria a coluna

tipo de dado semelhante ao modelo relacional

primeiro define a família de colunas, depois as colunas

relação lógica

A04_P03
HBASE
hbase.apache.org/downloads.html
feito para linux

configurar JAVA_HOME no arquivo hbase-env.sh

hbase-site.xml
configurar rootdir

./start-hbase.sh

http://localhost:16010

jps # lista os bancos de dados criados

A04_P04
CRUD no HBase

./hbase shell

create 'clientes', 'dados_pessoais', 'endereco'
'clientes' é a tabela
'dados_pessoais' e 'endereco' são duas famílias de colunas. Cada uma delas pode ter várias colunas

cria colunas no momento da inserção de dados

put 'clientes', '1', 'dados_pessoais:nome', 'Cliente1'
put 'clientes', '1', 'dados_pessoais:idade', '35'
put 'clientes', '1', 'dados_pessoais:cidade', 'Curitiba'
put 'clientes', '1', 'endereco:rua', 'Rua 18'
'1' é um identificador único

busca:
scan 'nome_da_tabela'
get 'nome_da_tabela', 'id_do_registro'

Update
put 'clientes', '1', 'dados_pessoais:idade', '50'

delete 'clientes', '1', 'dados_pessoais:idade'
deleteall 'clientes', '1'
se não colocar o código, apaga todo o banco de dados 'clientes'

A04_P05
garante a consistência, mas não a disponibilidade numa região

numa região um servidor primário replica os dados

escala linearmente
mínimo 5 nós

A04_P06
Recomenda uso em:
- logs
- preferências do usuário em uma rede social

A05_P01
Sumário

A05_P02
vértices e relacionamentos

não nativos: ex. usa modelagem de um banco de dados relacional

grafo multirelacional
grafo de propriedades

A05_P03
Neo4j

https://neo4j.com/download

instalação no windows

tem uma base de dados de exemplo: movie

permite usar apenas uma base de dados por vez

http://localhost:7474

A05_P04
Cypher
openCypher

Select * From nome_da_tabela
Match (n) Return n

Criando vértices
Create (nome_no)
Create (nome_no :label)
Create (Carlos :Pessoa :Pai)

CREATE (:User { name: "@jeff" })-[:FOLLOWS]->(:User { name: "@neo" })
https://www.youtube.com/watch?v=T6L9EoBy8Zk

Create (nome_no :label :Sublabel {propriedade:'valor'}) Return nome_no
Create (n :Pessoa :Pai {nome:'carlos', idade:'35'}) Return n

Criando relacionamentos:
Match (p :Label), (c :Label)
Where p.propriedade = 'valor' and c.propriedade = 'valor'
Create (p) - [r:Relacionamento]-> (c)
Return p, c, r

Match (p :Irmã), (c :Irmão)
Where p.nome = 'Julia' and c.nome = 'Mario'
Create (p) -[r:TemIrmão]-> (c)
Return p, c, r

Match (n) Where n.idade = '35' Return n
Match (n :Pai), (y :Mãe) Where n.idade = '35' and n.idade = '32' Return n, y

Match (n)
Detach Delete n

Match (p :Irmã) -[r :TemIrmão]-> (c :Irmão)
Where p.nome = 'Julia' and c.nome = 'Mario'
Delete r
Return p, c

A05_P05
garante as propriedades ACID
NoSQL não garante integridade

A05_P06
Redes sociais
Recomendação de compra
Identificação de padrões químicos

A06_P01
Sumário

A06_P02
Migração de esquema

Banco de dados NoSQL não é totalmente livre de esquema

Verificar quais consultas requerem NoSQL e migrar apenas as tabelas necessárias

A06_P03
Persistência poliglota

O banco de dados ter vários tipos de estrutura

Analogia com uma caixa de ferramenta

A06_P04
NoSQL é uma tecnologia de armazenamento de dados

Banco de dados XML

Banco de dados de objeto (POO)

Elasticsearch. Peso para as palavras. Gera recomendação

openCypher

Datomic. Armazena o histórico de armazenamentos. Usado em data warehouse

Spark. Motor para gerenciar fluxo

PostgreSQL: relacional que suporta características NoSQL
Redis: NoSQL do tipo chave-valor

Memcached

A06_P05
newSQL: é relacional, mas com desempenho NoSQL
tem as propriedades ACID (Acessibilidade, Consistência, Integridade e Disponibilidade)

aplicativos de banco e mercado financeiro

A06_P06
Como escolher um banco de dados
-produtividade do programador
-recursos (tem dinheiro disponível)

desenvolver protótipos que atendem algumas funcionalidades do software para testar o esquema do banco de dados
testar cenários que dependam de desempenho
testar como o sistema responde em situações para quais ele não foi programado

A09B
https://neo4j.com/docs/apoc/5/import/load-json/

A10B



 = = =

neo4j tem nodes, relationships, and properties

WITH 2 AS n
RETURN n

MATCH (n)
WITH n
ORDER BY n.name DESC
LIMIT 3
RETURN collect(n.name)

WITH [2, 3] AS n
FOREACH (i IN n | i^3)

RETURN 2 AS n
RETURN [2, 3] AS n
RETURN [0, "hello", 3.14, null] AS list
RETURN range(0, 10) AS n
RETURN range(0, 10)[3] AS n
RETURN [x IN [2, 3]] AS n
RETURN [x IN [2, 3] | x^3 ] AS n
RETURN [x IN range(0,10) | x^3 ] AS n
RETURN [x IN range(0,10) WHERE x % 2 = 0 ] AS n
RETURN [x IN ["José Silva", "Maria Vieira"] WHERE x contains 'Silva'] AS nome

UNWIND [1, 2, 3, null] AS x
RETURN x, 'val' AS y

UNWIND [] AS empty
RETURN 'literal_that_is_not_returned'

WITH [] AS list
UNWIND
  CASE
    WHEN list = [] THEN [null]
    ELSE list
  END AS emptylist
RETURN emptylist

WITH [1, 1, 2, 2] AS coll
UNWIND coll AS x
WITH DISTINCT x
RETURN collect(x) AS setOfVals

WITH [[1, 2], [3, 4], 5] AS nested
UNWIND nested AS x
UNWIND x AS y
RETURN y

UNWIND [0, 1, 2] AS x
CALL {
  WITH x
  RETURN x * 10 AS y
}
RETURN x, y

UNWIND [1, 2, 3, 4, 5, 6] AS x
WITH x
LIMIT 5
WHERE x > 2
RETURN x

MATCH (n)
RETURN n
LIMIT 10

match (p:Customer) return p
match (p:Customer {contactName:"Pedro Afonso"}) return p

MATCH (person)-[r]->(otherPerson)
WITH *, type(r) AS connectionType
RETURN person.name, otherPerson.name, connectionType


ver todos os nós e relações
MATCH (n)
OPTIONAL MATCH p=(n)--()
RETURN p, n


CALL apoc.load.json("file:///person.json")
YIELD value
MERGE (p:Person {name: value.name})
SET p.age = value.age
WITH p, value
UNWIND value.children AS child
MERGE (c:Person {name: child})
MERGE (c)-[:CHILD_OF]->(p);

CALL apoc.load.directory('*.csv', 'path/to/directory')
YIELD value WITH value as url ORDER BY url DESC
CALL apoc.load.csv(url, {results:['map']}) YIELD map RETURN map

WITH [1, 2, 3] AS t
FOREACH (n IN t | CREATE (p :Teste {id:n}))

MATCH p=(start)-[*]->(finish)
WHERE start.name = 'A' AND finish.name = 'D'
FOREACH (n IN nodes(p) | SET n.marked = true)
