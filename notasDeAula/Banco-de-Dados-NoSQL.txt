
A01_P01
sumário

A01_P02
NoSql: chave-valor, documentos, família de colunas, grafos

quando é em tabelas pode ficar várias células com valor null

representaddos em xml, json, bison

noSQL versus relacional: depende do problema que quer resolver

controle de estoque > relacional
postagens em um fórum > noSQL

A01_P03
disponibilidade (usa vários servidores, então o sistema não para se uma máquina parar)
escabilidade:
  - vertical: aumentar RAM e potência do processador
  - horizontal: aumentar a quantidade de servidores

Teorema CAP
Manter consistência após operação
Disponibilidade (manter em operação)
Tolerância a partições

A01_P04
Modelo de dados
não especifica tipo de variáveis

integridade: no relacional, se um valor é usado, o sistema não deixa excluí-lo.

nosql não evita repetição de dados

relacional requer mais processamento e permite consultas mais complexas

A01_P05
Modelo de dado agregado

Não há uma definição sobre como os dados são agregados: guardados em um documento ou dividido em vários.

A01_P06
Distribuição dos dados em vários servidores e consistência

pode fragmentar ou replicar os dados por servidores

fragmentar > exemplo de organizar alfabeticamente os dados em fichários
replicação: mestre-escravo (apenas leitura), ponto a ponto (todos são mestres e compartilham os dados)
concorrência: pessimista ou otimista

A02_P01
sumário

A02_P02
chava-valor

precisa conhecer a chave para fazer consulta.
não consegue fazer consulta por valor

DynamoDB> nuvem
Redis> local

A02_P03
DynamoDB é da AWS (Amazon Web Services), é orientado a chave-valor e a documentos

custo é por número de acessos

tem time-to-live: quanto tempo um dado será guardado

acesso:
AWS console
AWS cli
AWS SDK
API

tabela, chave primária, linhas>itens, colunas>atributos

obrigatório um campo como chave primária. Pode ter até 2 campos.

scalar type: string, number, boolen, binary, null
set type: um array de um scalar typer
document type: um array com diferentes scalar type. Aceita array vazio, mas não com dados vazio ["", ""], {"nome": ""}
é como um objeto

A02_P04
https://aws.amazon.com/pt/console
criou uma tabela e adicionou um item

A02_P05
leitura
 - EC (eventualmente consistente). Pega dados em um cache. Não é o mais atual.
 - FC (fortemente consistente). Lê diretamente da tabela. É mais lento

RCU (Read Capacity Unit)
1 RCU FC = 1 leitura por segundo
1 RCU EC = 2 leitura por segundo

1 RCU = bloco 4kB
1 WCU = bloco 1kB

ver quantos bytes tem uma entrada a ser escrita. Não deve passar os 5 WCU provisionados gratuitamente.

escabilidade: pode mudar 4 vezes ao dia

A02_P06
casos de uso
situações que não exijam integridade de dados, tenha grande voluma, e alta quantidade de acessos

A07
DynamoDB e glitch e nodejs

AWS IAM service: configurar acesso

A03_P01
sumário

A03_P02
em nosql não se aplica as regras de normalização
não tem join em busca
usa json

em chave-valor, busca pela chave
em documentos, pode buscar pela chave ou pelo valor

se preocupa mais com a leitura e a apresentação do resultado da busca

no modelo relacional temos atributos (colunas), no nosql temos chaves

modelagem incorporada: um único arquivo
modelagem referenciada: armazena os dados em vários documentos, há referência de um para outro, menor desempenho em consulta.

A03_P3
banco de dados tem coleções que tem documentos
tipos de dados: string, boolean, integer, double, array, null

www.mongodb.com

A03_P04
CRUD
Create Read Update Delete
insert()  find() update() delete()

use vendas # cria se ainda não existir
db.getName()

db.coleção.insertOne()   # coleção também é criada automaticamente
db.coleção.insertMany()

db.clientes.insertOne(
  {
    nome: "Alex",
    endereco: "Rua das avenidas, 288",
    idade: 18
  }
)

db.clientes.find({idade: 18})
db.clientes.find({idade: {$gt: 18}})

gt, gte, lt, lte

db.coleção.updateOne()
db.coleção.updateMany()

db.clientes.updateOne({nome: "Alex"}, {$set: {idade: 25}})

db.coleção.deleteOne()
db.coleção.deleteMany()

db.clientes.deleteMany({idade: 25})

A03_P05
heartbeat: checagem se os nodos estão funcionando

checa consistência por documento, não por dado

A03_P06
Usos

A04_P01
Estrutura orientado a colunas
sumário

A04_P02
mais complexo que os demais NoSQL
cada registro possui suas colunas específicas, mas se não tiver o dado, não cria a coluna

tipo de dado semelhante ao modelo relacional

primeiro define a família de colunas, depois as colunas

relação lógica

A04_P03
HBASE
hbase.apache.org/downloads.html
feito para linux

configurar JAVA_HOME no arquivo hbase-env.sh

hbase-site.xml
configurar rootdir

./start-hbase.sh

http://localhost:16010

jps # lista os bancos de dados criados

A04_P04
CRUD no HBase

./hbase shell

create 'clientes', 'dados_pessoais', 'endereco'
'clientes' é a tabela
'dados_pessoais' e 'endereco' são duas famílias de colunas. Cada uma delas pode ter várias colunas

cria colunas no momento da inserção de dados

put 'clientes', '1', 'dados_pessoais:nome', 'Cliente1'
put 'clientes', '1', 'dados_pessoais:idade', '35'
put 'clientes', '1', 'dados_pessoais:cidade', 'Curitiba'
put 'clientes', '1', 'endereco:rua', 'Rua 18'
'1' é um identificador único

busca:
scan 'nome_da_tabela'
get 'nome_da_tabela', 'id_do_registro'

Update
put 'clientes', '1', 'dados_pessoais:idade', '50'

delete 'clientes', '1', 'dados_pessoais:idade'
deleteall 'clientes', '1'
se não colocar o código, apaga todo o banco de dados 'clientes'

A04_P05
garante a consistência, mas não a disponibilidade numa região

numa região um servidor primário replica os dados

escala linearmente
mínimo 5 nós

A04_P06
Recomenda uso em logs


A05_P01


A05_P02
