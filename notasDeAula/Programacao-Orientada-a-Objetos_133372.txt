apt-get install openjdk-17-jdk

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

A01-P01
sumário

A01-P02
paradigma de programação

Imperativos
Java: orientação a objetos
C: procedural ou estrutural

Declarativos
Scala: funcional
Prolog: lógico

misto: java, python, php, c++, c#

orientação o objetos é melhor para fazer manutenção

função comprar
cliente.comprar()

A01-P03
historia

A01-P04
compilado x interpretado

melhor desempenho do compilado

o código fonte é transformado em bytecode, que será lido pela máquina virtual

jdk: para quem vai escrever código
jre: para quem apenas executa programas

garbage: libera memória que foi alocada e não é mais usada

A01-P05
IDE eclipse

instalou e rodou hello world

A01-P06
variável, tipo

atalho crtl+shift+L
sysout ctrl+space, também mostra parâmetros de função
copia linha: ctrl+alt+seta para baixo
escreve import: ctrl+shft+o


tudo é double
float nota = 4.5f;

System.out.println("Idade = " + idade);
System.out.printf("Idade = %d\n", idade);

package uninter;
import java.util.Scanner;
public class Principal {
	public static void main(String[] args) {
		System.out.println("Hello world");
		int idade = 10;
		System.out.println("Idade = " + idade);
		System.out.printf("Idade = %d\n", idade);

		Scanner teclado = new Scanner(System.in);
		idade = teclado.nextInt();
		System.out.printf("Idade = %d\n", idade);
		
		if (idade < 18) {
			System.out.printf("Acesso bloqueado\n");
		}
		else if (idade <  65) {
			System.out.println("Adulto");
		}
		
		String nome = "Tarciso";
		System.out.printf("Idade = %s\n", nome);
		nome = teclado.next();
		System.out.printf("Idade = %s\n", nome);
	}
}

while
for
array

A07
fecha projeto antigo e cria novo

IMC = peso/altura²
separador decimal: ponto no código, vírgula no console

letras acentuadas no código foram impressas erradas

trocou if else por operação ternária, isso reduziu a quantidade de linhas

Java não manipula com arrays

import java.util.ArrayList
ArrayList<String> listaNomes = new ArrayList<String>();
ArrayList<Integer> meagasena = new ArrayList<Integer>();

listaNomes.add(nome);
nome = listaNomes.geti();
listaNomes.size();

System.out.println(listaNomes);
Collections.reverse(listaNomes);

A02-P01
Sumário

A02-P02
classes e atributos

exemplo de classe: carro
criou a classe alunos

A02-P03
criou um método

A02-P04
regras para nomes:
pacote: letras minusculas
classe: primeira letra maiúscula

static
método não associado a uma instância
variável global

static final double PI = 3.14;
Carro.PI;

static float milhasParaMetro(milhas)
Carro.milhasParaMetro(2);

A02-P05
UML
diagrama de classe

┌────────────────┐
│ aluno          │
├────────────────┤
│ nome: String   │
│ cpf: String    │
│ matricula: int │
├────────────────┤
│ void info()    │
└────────────────┘

relação de classes

A02-P06
construtores
vazio sem parâmetros
com parâmetros
this
public class Aluno {
	int matricula;
	String nome;
	String cpf;
	
	void info() {

		System.out.println("Matricula: " + matricula);
		System.out.println("Nome: " + nome);
		System.out.println("CPF: " + cpf);
	}

	Aluno(){
		System.out.println("Aluno criado sem parametros");
	}
	
	Aluno (int matricula,String nome,String cpf){
		this.matricula= matricula;
		this.nome = nome;
		this.cpf = cpf;
	}

	public Aluno(int matricula) {
		this.matricula = matricula;
		this.nome = "Vazio";
		this.cpf = "000.000.000-00";
	}
}

A8
criou classes e métodos

escreveu o código principal como se as classes já existissem.

O eclipse fez os construtores automaticamente.

A03-P01
Visibilidade
Encapsulamento
Collections
Interator
Classe localdate

A03-P02
Visibilidade
mudou variáveis na classe Aluno e tentou acessá-las na classe Principal.
Criou o pacote outro e tentou acessar a classe aluno.
import empresa.Aluno;


A03-P03
Encapsulamento

visibilidade no UML
+ público
# protegido
- privado
┌────────────────┐
│     Aluno      │
├────────────────┤
│ +nome: String  │
│ +cpf: String   │
│ -matricula: int│
│ #notas: int[]  │
├────────────────┤
│ +info(): void  │
│ +mediaNotas(): int    │
│ +Aluno(nome: String, cpf: String)│
└────────────────┘

get & set
public class Horario {
	private int hora;
	private int minuto;
	private int segundo;
	
	public int getHora() {
		return hora;
	}
	public void setHora(int hora) {
		if(hora>= 0 && hora <=23) {
			this.hora = hora;
		}
		else {
			System.out.println("Hora invalida");
		}
	}
}

eclipse > source > Generate getters and setters


A03-P04
Collections
- Set
- List
  - ArrayList
  - LinkedList
- Queue
- Map

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;

//ArrayList<String> pessoas = new ArrayList();
LinkedList<String> pessoas = new LinkedList();

pessoas.add("Mario");
pessoas.add("Luigi");
pessoas.add("Peach");
pessoas.add("Yoshi");

//System.out.println(pessoas.get(0));
//pessoas.remove(1);

System.out.println("Ordem alfabetica");
System.out.println(pessoas);

System.out.println("Ordem alfabetica");
Collections.sort(pessoas);
System.out.println(pessoas);


System.out.println("Ordem shuffle");
Collections.shuffle(pessoas);
System.out.println(pessoas);


System.out.println(Collections.min(pessoas));
System.out.println(Collections.max(pessoas));


HashMap<String,String> capitais = new HashMap();

capitais.put("Brasil","Brasilia");
capitais.put("Argentina","Buenos Aires");
capitais.put("Paraguai","Assunção");
capitais.put("Uruguai","Montevidéu");

System.out.println(capitais);
System.out.println(capitais.get("Uruguai"));

A03-P05
iterator
ArrayList<Integer> lista = new ArrayList();
HashSet<Integer> conjunto = new HashSet();
HashMap<String,Integer> mapa = new HashMap();

int soma;
soma=0;
for (int i = 0; i < lista.size(); i++) {
  soma+=lista.get(i);
}

soma =0;

for(int item : lista) {
  soma+=item;
}

soma=0;

//Iterator it = lista.mapa.entrySet().iterator();
//Iterator it = conjunto.iterator();
Iterator it = lista.iterator();

while(it.hasNext()) {
  soma +=(int)it.next();
}

A03-P06
LocalDate dataHoje = LocalDate.now();

System.out.println(dataHoje);

DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy - EEEE");
System.out.println(dataHoje.format(formatador));

// ss segundos
// mm minutos
// hh horas 12
// HH horas 24

A09
usou get & set em construtor

A04-P01
Herança
super e this
UML

A04-P02
classe superclasse, mãe, herdada, base e original são sinônimos
classe subclasse, filha, herdeira, específica e devivada são sinônimos

A04-P03
public class LivroDigital extends Livro {
}

A04-P04
Pelo menos um construtor da subclasse tem que ser igual ao da superclasse
public LivroDigital(String titulo, String autor, String linkDownload) {
  super(titulo, autor); // tem que ser a primeira linha

}

eclipse > source > Generate construtor

A04-P05
this

super.imposto()
this.imposto()

LivroDigital l2;
l2 instanceof Livro // retorna true

A04-P06
diagrama de classes em UML
- multiplicidade
- associação
- agregação, composição, herança, dependência

A10
diagrama de classes com relações
protected

// A anotação Override substitui o método info da classe mãe
@Override
public void info() {
}

A05-P01
Polimorfismo
Interfaces

A05-P02
subtipagem
um método de uma classe filha muda um método da classe mãe. Override

polimorfismo paramétrico: deixa o usuário de um objeto escolher o tipo de uma variável

coerção
int n = 3.5; // pega 3

overloading
duas funções com o mesmo nome, mas diferentes quantidades de parâmetros

A05-P03
criou um array com vários tipos de funcionários
criou um loop que imprimia os funcionários

era polimorfismo por que havia uma variável que mudava de tipo em cada volta do loop

A05-P04
Classe abstrata

public abstract class Funcionario {
  public abstract float pagamento();
}

Se definida como abstract, não permite criar instâncias da classe, apenas instâncias de subclasses.

FormaGeometrica, area, calcularArea()

A05-P05
Interface

public interface Animal {
  public void emitirSom();
  public void dormir();
}

public class Gato implements Animail {
  @Override
  public void emitirSom() {

  }

  @Override
  public void dormir() {

  }
}

Animal a1 = new Gato();
Gato g1 = new Gato();


A05-P06
Enumeradores

enum Estacao {
  VERAO,
  OUTONO,
  INVERNO,
  PRIMAVERA
}

Estacao colecao;

switch (colecao) {
  case VERAO:
    sysout "Arrase na praia";
    break;
  case INVERNO:
}

Roupa r1 = new Roupa("camisa", 3, Estacao.OUTONO);

A11
abstract
polimorfismo

ArrayList<Computador> listaComputadores = new ArrayList();

for (Computador c: listaComputadores) {
  c.calcularValor();
}

implements Imprimivel, Leitora

A06-P01
Exceções

A06-P02
Erro: problema que ocorre em tempo de execução, geralmente relacionado ao sistema operacional. Ex.: mem alloc
Exceção: problema que ocorre em tempo de execução, que pode ter tratado ou manejado. Ex.: open file: not found

call stack: pilha de chamadas de função

int numeros[] = {1,2,3};

try {
  System.out.println(numeros[10]);
}
catch (ArrayIndexOutOfBoundsException e) {
  System.out.println("ERRO: " + e.getMessage());
  return;
}
catch (Exception e) {
  System.out.println("ERRO: " + e.getMessage());
}
finally {
  System.out.println("Sempre vai executar, mesmo com return.");
}

A06-P03
try {
  if(valor < 10) {
    throw new Exception("Valor inválido");
    throw new RunTimeException("Valor inválido"); // não precisa try catch
  }
}
catch (Exception e) {
  System.out.println("ERRO: " + e.getMessage());
}

public class ValorInvalidoException extends Exception {

}
throw new ValorInvalidoException("Valor inválido");

A06-P04
igualdade de objetos
obj1 == obj2 // compara os ponteiros apenas, não os conteúdos

str1.equals(str2)

eclipse > source > generate equals

A06-P05
ao tentar imprimir um objeto ele mostra o nome do objeto @ endereço de memória
toString mostra o conteúdo do objeto

A06-P06
singleton // ao instanciar (new) sempre retorna a mesma instância
equivale à variável global em C

public class Singleton {
  private int numero;
  privade static Singleton instancia = null;

  private Singleton() {
    numero = 20;
  };
  
  public static Singleton getInstance() {
    if (instancia == null) return new Singleton();
    
    return instancia;
  }
}

Singleton s1 = Singleton.getInstance();

A12
void sacar(int valor) throws Exception {
  throw new Exceptio("Saldo insuficiente");
}
quem chamar o método sacar precisa usar try/catch ou usar o throws outra vez

as exceções Checked são aquelas no qual você é obrigado a tratá-la, seja com um bloco try-catch ou mesmo com um throws (relançando a mesma para outro local). 
