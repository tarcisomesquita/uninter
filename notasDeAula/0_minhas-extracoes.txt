Quando cancelei a matrícula, não devolveram as mensalidades que eu havia pago adiantado.

https://univirtus.uninter.com
BACHARELADO EM ENGENHARIA DE SOFTWARE - DISTÂNCIA (6270)
matrícula: 4320512

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Fundamentos-de-desenvolvimento-de-softwares

Se não tem tempo para a engenharia de software, terá tempo para refazer o software?

Objetivo é a qualidade de software

Atributos da qualidade do software:
	satisfaz os requisitos
	fácil de usar
	confiável (tolera falhas)
	desempenho (rápido)
	fácil de manter

Um engenheiro de software não é um programador, assim como um engenheiro civil não é um pedreiro.

Engenheiro de Software escolhe os processos, as fases e avalia o desenvolvimento.
Analista: compreensão do problema, levantamento de requisitos e modelagem
Programador: conhecimento IDEs, linguagem, bibliotecas e testes.

Ciclo de vida ou Modelo de processo:
	Definição
		Requisitos (reuniões e documentação)
		Definição do problema
		Análise do sistema (estruturado, orientado a objetos)
	Desenvolvimento
		Definição de módulos
		Algoritmo
		Codificação
		Testes
	Manutenção (ajustes)
		Manual
		Modificações (inclusão ou alteração de módulos)
		Treinamento do usuário

Mitos:
  Gerenciamento:
    basta ter um livro com regras
    mais programadores não reduz o tempo: precisa treinar
    tercerizar: requer acompanhamento

  Cliente:
    basta definir objetivos, detalhes podem ser ajustados depois. Precisa requisitos detalhados.
    pode mudar os requistos e o software (afeta os prazos)

  Profissional da área:
    O trabalho termina quando acaba o desenvolvimento (60% a 80% do tempo é com manutenção)
    O produto é o software (tem o modelo, os documentos, treinamento, etc)
    Documentação é perda de tempo

Modelos de computação em nuvem:
  IaaS (Infraestrutura como serviço)
  	Oferece hardware
  	Usuário gerencia o sistema operacional e o servidor
  	EC2 da AWS
  PaaS (plataforma como serviço)
  	Usuário recebe um ambiente de desenvolvimento
  	Elastic Beanstalk e RDS da AWS
  SaaS (software como serviço)
  	Facebook, Drop Box, Office 365

000webhost.com
w3schools.com

<link rel=stylesheet href=estilo.css>

pseudo classe
.imagem:hover {background:#FF0000;} // quando passa o mouse sobre

.alternada {
 list-style: url(); // upper-latin; upper-roman; upper-alpha;
}
.alternada li:nth-child(odd) {background-color:khaki}
.alternada li:hover {fond-weight: bolder}

<ul class="alternada">
<li></li>
</ul>

<p id="para1">
let paragrafo = document.querySelector("#para1");

paragrafo.addEventListener("click", trocaTexto);

function trocaTexto() {
  paragrafo.style.backgroud = "red";
}

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

tempo de acesso: L1 tem 5 ns, L2 tem 15 ns e RAM tem 100 ns
razão de falha: L1 tem 10% e L2 tem 20%

Tempo de acesso médio: 5 ns * 100% + 15 ns * 20% + 100 ns * (20% * 10%) = 10 ns

mais variáveis locais que globais gera menor razão de falha e o programa roda mais rápido

concorrência entre programas
	interrupção (está usando um aplicativo e entra uma ligação)
	exceção: gerada pelo software
	controladores (E/S, ponte norte e sul)
	buffering: gravação em disco, libera memória
	spooling: buffer de impressão
	reentrância: quando abre várias abas no navegador, reaproveita a imagem carregada.


 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Fundamentos-de-Infraestrutura-da-Tecnologia-da-Informacao

entrada > sistema > saída

processamento: hardware, software, peopleware (usuários ou desenvolvedores) e rede

sistemas de informações = {tecnologia, pessoa, organização}

Bussiness Intelligence: análise automática, gera relatórios

dados:
  estruturado: modelo predefinido, tabela
  semi-estruturado: usa tags como separadores, JSON
  não estruturados: audio, videos, fotos

tríade segurança da informação = {disponibilidade, integridade, confidenciabilidade}
testar os sistemas de recuperação de dados

Desenvolvimento:
- levantamento do sistema (qual sistema já possui, quais serão as demandas futuras)
- análise da necessidade
- projeto
- imprementação
- teste (incluir usuário)
- mudança
- manutenção

rede social: visibilidade, marketing

agilidade no tempo de resposta
  separar em módulos a serem carregados quando necessário
  eliminar código desnecessário
  atrasar o carregamento de imagens
  otimizar imagens
  adiar scripts
  reduzir conexões http
  usar cache

site responsivo: se ajusta à telas diferentes

smallbusiness.withgoogle.com

Tipos de sistemas de informação
  Sistema de processamento de transações (SPT)
    Armazenado em banco de dados.
    Registram as transações rotineiras, como valores recebidos, despesas, folhas de pagamento e controle de estoque.
    Os dados podem ser captados por sensores, como leitores de códigos de barras, ou inseridos por funcionários.
  Sistema de informação gerencial (SIG)
    Pegam dados de uma base e geram relatórios.
  Sistema de apoio à decisão (SAD)
    Usado para elaborar orçamentos e análise de investimentos. Este sistema usa dados de várias bases.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Fundamentos-de-Design-de-Sistemas

software tem tempo de vida

documentação, entendido por todos, fazer manutenção

conhecer o negócio da empresa, os concorrentes e trazer inovação

modelo arquitetural
  - camadas
    - apresentação
    - aplicação
    - banco de dados
  - cliente-servidor
    - informações enviadas conforme são requisitadas
  - MVC (modelo, visão, controle)
  - Microserviços

https://www.figma.com
sed.decourt

entrevista: identificar as experiências e expectativas do usuário: "como", "por que".

protótipo
  - baixa fidelidade (apenas esboço de caneta: caixa com risco, não tem figura, pouco texto)
  - média fidelidade (prova de conceito: alguma imagem qualquer, um pouco de cor)
  - alta fidelidade (cores e imagens reais, roteiro de experimentação)

wireframe: representação básica, sem cores
  foco no conteúdo, estrutura, hierarquia, funcionalidade, comportamento

Pilares da arquitetura da informação
  - organização (lógica)
  - rótulo (ícones, títulos)
  - navegação
  - busca

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Fundamentos-da-Computacao

- Moda
elementos que aparecem mais vezes

- Mediana
Ordena os valores, pega o que está na posição central
se n é par, faz uma média dos dois elementos centrais

Fundamentos de IA
Se a mente opera de acordo com regras lógicas
  Pode ser emulada
Panini (350 a.C.): pensamento é independe da linguagem (a língua é uma ferramenta para o pensamento)

um código computacional e uma base de conhecimento. Também tem sensores e atuadores.
Quase não há possibilidade de aprendizagem (não muda o código ou a base de conhecimento)

jogo dos 15
Abstrações: regras. Quais ações podem ser feitas.
Resolução de problemas:
  - busca na base
  - teste de objetivo
Custo: quantidade de ações necessárias para atingir o objetivo.

Constituição Federal
Leis Complementares
Leis Ordinárias
Medidas Provisórias
Decretos Regulamentadores
Resoluções, Normas , Portarias

lei 9.609 de 1998
software
tutela por 50 anos após a publicação
independe de registro

sinais de autoria:
	Padrões de escrita característicos # public class prinCIpal
	Trechos de código característicos  # var1 = new Aluno(12, "Nome do Cara", 32626262, "ADS");
	Presença de assinatura oculta      # throw new Exception("123 456 789 -91 - overflow");
	Presença de assinatura expressa    # /* Autores: Fulano de Sobrenome e Ciclano de Familia*/

Entrevista técnica
	Habilidade de encarar um problema com responsabilidade e metodologia

Entrevista de gestão
	Se será um acréscimo para a empresa
	Como lidaria com um conflito em sua equipe

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Bancos-de-Dados-Relacionais_133368.txt

Um banco de dados é um conjunto de arquivos. Por exemplo, pode ser só um arquivo csv.

redundância: dados não repetidos
concorrência: vários usuários editanto simultaneamente
integridade: não remover se houver dependência, data de nascimento não pode ser maior que a atual
inconsistência: um mesmo campo tem valores diferentes em sistemas diferentes


Modelagem de Dados
- conceitual: conversa com o cliente, esboço (MER)
- lógico: SGBD (diagrama contendo nome dos campos e tipo de dado)
- físico: tabelas, banco de dados no servidor

MER: Modelo Entidade Relacionamento
Entidade: objeto do mundo real: aluno. Os campos contém as características de uma entidade. Ex.: nome, data de nascimento
Relacionamento: ligação à outra entidade: aluno reside cidade

Instância de entidade (registros): conjunto de campos ou uma linha da tabela. Ex.: Pessoa: nome, cpf, endereço

cardinalidade
(1:1) pode ter apenas um conjuge (pessoa possui(1:1) conjuge). Eliminar. Colocar como atributo.
(n:1) [cliente]---<reside n:1>---[cidade]. Chave estrangeira (FK) fica do lado n. Cliente recebe o código da cidade.
(n:n) [cliente]---<possi n:n>---[conta]. Cria uma nova entidade
      [cliente]---<possi 1:n>---[contaCliente]---<possi n:1>---[conta]

banco-de-dados-relacionais_MER.png

pé de galinha: [cliente]->--[cidade]

(mínimo,máximo)
[cliente (0,n)]---<reside n:1>---[(1,1) cidade]

terminologia (conceitual, lógica, sql)
(entidade, relação, tabela)
(campo, atributo, coluna)
(registro, tupla, linha)

Operadores relacionais
• Operadores unários – seleção (where) e projeção (select);
• Operadores binários – união (union), diferença (difference) e produto cartesiano (cross join);
• Operadores derivados – intersecção (intersect), junção (join) e divisão (divide);
• Operadores especiais – renomeação e atribuição (assignment

TERMINAR

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Comunicacao-Empresarial

Vygotsky: não se pensa no que vai falar (sequência de palavras), mas no que vai comunicar

hoje a informação precisa de uma boa referência, de uma validação.

não gosto de ler. Não deve estar lendo o que gosta

a cada parágrafo diga sobre o que o parágrafo fala.
identificar palavras chaves

Cada parágrafo tem uma idéia central, tem introdução e conclusão. A idéia central deve aparecer na primeira frase do parágrafo.
coesão: idéias dos paragráfos devem estar relacionadas.

ter conteúdo para falar
Apresente se
Agradeça a presença
observe a reação do ouvinte
Resumo e tempo previsto
No final deixe algo para continuar pensando.

partir do geral para o particular

argumento por 
causa e consequência: se fizer isso, ocorrerá aquilo
raciocínio: x por que y, x leva a y. Sócrates morre por que Sócrates é homem. Um homem é mortal.
evidência: dado, a estatística, o mercado aponta. (Tenta prever o futuro olhando para eventos do passado)
comparação: assim resulta x, tal resulta y
autoridade: x fez e deu certo
ilustração: empresa x fez

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Oratória

Em vez de falar para a platéia, falar para a internet. É onde compartilham. Não passar de 1 minuto.
Interagir a cada 1 minuto.

Fale calmamente, fazendo breves pausas de uma frase para a outra. É fundamental planejar o discurso e o ritmo.

Use a impostação vocal, ou seja, a ressonância corporal.

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Fundamentos-de-Sistemas-de-Informacao

Desenvolvimento:
- levantamento do sistema (qual sistema já possui, quais serão as demandas futuras)
- análise da necessidade
- projeto
- imprementação
- teste (incluir usuário)
- mudança
- manutenção

dados estruturados, não estruturados, semi-estruturado

estruturado: modelo predefinido, tabela
semi-estruturado: usa tags como separadores, JSON
não estruturados: audio, videos, fotos

tríade segurança da informação = { disponibilidade, integridade, confidenciabilidade }

SEO

agilidade no tempo de resposta. Teste em conexões lentas.
splitting: separar em módulos a serem carregados quando necessário
free shaking: eliminar código desnecessário
lazy loading: atrasar o carregamento de imagens
adiar scripts

reduzir conexões http
otimizar imagens
usar cache

site responsivo: se ajusta à telas diferentes

smallbusiness.withgoogle.com

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Logica-de-Programacao-e-Algoritmos_133365.txt

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Analise-e-Modelagem-de-Sistemas

Ouve as necessidades do usuário. Entender a necessidade e devolver para o usuário.
Vai melhorar minha vida, vai trazer benefícios para mim? Isso deve estar claro para que forneçam informações.

Um processo é uma sequência de passos (ações e agentes)

processos de negócio (o que o software vai automatizar)

desenhar o fluxo do proceso AS IS e do processo TO BE
fluxos precisam ser aprovados pelos usuários

papéis e responsabilidades dentro do processo

identificar falhas, dificuldades, coisas que podem ser melhoradas

BPMN
Notação de Modelagem de Processo de Negócio
FIGURA
retângulo = ação
losango = decisão (divisão de fluxo)
tem setas de direção
tem ponto de entrada (pode ter vários. Por exemplo, inicia pela internet ou presencialmente)
pode ter vários pontos de saída

tarefa (bola azul): algo feito em um processo por um ator conhecido
evento (bola amarela): ação que são acionadas pelo ambiente externo

https://edrawmax.com

DFD (diagrama de fruxo de dados)

análise de sistema: melhor caminho lógico para processar informação
transformas as necessidades do cliente em funcionalidades do software

pode construir DFD para cada nível de detalhes
nível zero: nome e departamentos que usarão

requisitos são as necessidades e o que o software deve fazer para atender essas necessidades

passos:
1) concepção: compreender o problema, conhecer o cenário de atuação e as necessidades (fluxo)
2) levantamento: entender em detalhes as necessidades entrevistando os funcionários (fluxo)
3) elaboração: organiza as informações ao elaborar um modelo técnico
4) negociação: os usuários validam os requisitos
5) especificação: desenvolve o projeto de construção do software

requisitos não funcionais: performance, aparência, usabilidade, robustez, confiabilidade. (critérios de qualificação)
requisito não funcional: tempo de resposta, tipo de fonte, quebras no texto.

fluxo principal
fluxo alternativo: digitou cpf errado
fluxo de exceção: um help line (opções não obrigatórias, que são acionadas pelo usuário se quiser)

Um caso de uso tem:
nome: comprar produto (verbo, objetivo)
descrição: possibilitar ao cliente a compra de produtos
pré-condições: cliente ser usuário válido e estar logado

Estórias de usuário
formato: como/sendo <quem>, eu quero/gostaria/devo/posso <o que>, para que/de/para <por que/resultado>
Usuário usará o software para fazer o que?

Diagrama de caso de uso
relação entre as funcionalidades

Diagrama de classes

tipos de relacionamento
associação
generalização
dependência

Passos a serem seguidos:
- Levantar os requisitos
- Modelar diagrama de caso de uso
- descrever os casos de uso
- Identificar as classes
- Identificar os atributos e métodos
- Modelar o diagrama de classes

diagrama de estado
elementos: objeto, evento, estado, transição

diagrama de atividades
elementos: estado inicial e final, transição, decisão, bifurcação e união, raias (uma para cada ator), 

diagrama de sequência
camadas (tela, servidor, banco de dados)
um diagrama de sequência para cada caso de uso

https://github.com/N-CPUninter/Exemplo_analise_de_requisitos

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Engenharia-de-Software_133369.txt

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Interface-Humano-Computador_133371

Ferramentas para fazer protótipo de página da web
https://wireflow.co/
https://jdittrich.github.io/quickMockup/

desenvolvemos sistemas que server para auxiliar as pessoas

Lei de Fitts: tempo gasto para mover o mouse. 15 cm > 0,2 s

design para o prazer
psicoprazer: eu consegui!
ideoprazer: independência, liberdade, criatividade

https://premotool.com
premo: 14 emoções
7 positivas   7 negativas
inspiração    indignação
desejo        repugnância
satisfação    insastifação
agradável     desagradável
fascinação    desapontamento
divertimento  tédio
admiração     desprezo

pleasant surprise    unpleasant surprise
satisfaction         dissatisfaction
admiration           contempt
desire               disgust
amusement            boredom
fascination          disappointment
inspiration          indignation

um like tem mais valor que uma propaganda boca a boca

velocidade de acesso é uma das grandes insatisfações

princípios de usabilidade:
- aprendabilidade (visibilidade, consistência, familiaridade, e affordance)
- efetividade (navegação, controle, retorno, recuperação, restrição)
- acomodação (flexibilidade, estilo, sociabilidade)

que o usuário consiga usar sem precisar de um treinamento

avaliação é um processo constante

https://mobiletest.me
https://validador.w3.org

acessibilidade: remoção de barreira para algumas pessoas
usabilidade: tempo gasto na tarefa, quantidade de erros cometidos, tempo para aprender a usar
aceitabilidade: adequação ao propósito, gosto

uso simples e intuitivo: poucas funções
não espere que as pessoas guardem muita coisa na memória
eficiência (mínimo esforço), eficácia (organizado), facilidade (aprendizagem), segurança, alta utilidade

Aceitabilidade: não tem como prever

retorno para que as pessoas percebam o efeito de suas ações
recuperação: conseguir se livrar de enganos
restrições: impedir que as pessoas cometam erro. Confirmação para ações perigosas

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Pre-Calculo

triângulo
lados: equilátero, isócele (dois lados iguais), escaleno
ângulo: agudo (todos < 90), reto, obtuso (um ângulo > 90°)

para ser triângulo, o maior lado tem que ser menor que a soma dos outros dois lados.

usa teorema de pitágoras e o tamanho dos lados para determinar se o triângulo é agudo (<), reto (=) ou obtuso (>)

soma dos ângulos internos de um polígono é (n - 2) * 180°

sistema linear
metodo substituição
metodo soma
sistema possível determinado (multiplicou uma linha por -1 e depois somou) (solução é o ponto onde duas retas se cruzam)

sistema possível indeterminado  (multiplicou uma linha por -1 e depois somou, obteve 0 = 0. Significa que tem mais de um resultado) (retas sobrepostas)
a + b = 2
2a + 2b = 4

sistema impossível (obtém 0 = 1, não tem solução) (retas paralelas)
a + b = 2
a + b = 3

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Visualizacao-de-Dados-e-Storytelling

Objetivos: ser claro, contar uma boa história, levar um bom conteúdo
conhecer o público e adequar a linguagem (palavras) e *exemplos*
Selecionar itens e a sequência
preparar recursos visuais
ensaiar para obter o tempo certo

castelo da memória: pegar uma região conhecida. Se imaginar passeando por ela. Incluir na paisagem elementos que quer lembrar.

usar a narrativa para acionar respostas emocionais e cognitivas

Interação:
- perguntas inclusivas (apresentador pergunta)
- perguntas e respostas (platéia pergunta)
- incentivo à participação (brindes)
- interação além do auditório (usar hashtags)

imagem: uma referência (https://babelnet.org/, google images, https://pixabay.com/, https://yandex.com/images/, https://tineye.com/)

não fique parado enquanto fala, fique atento, aprenda sobre seu público e quaisquer fatores logísticos (terá computador, terá datashow, usa linux, etc)
som da sua voz calma e confiante colocará você e seu público à vontade
afinação vocal: Ritmo, tom e pausas.
numa apresentação eficaz, a mensagem é adequada ao público
o discurso se adapta ao momento, às reações do público

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Gerencia-de-Configuracao-e-Evolucao

Necessidades evoluem, software atendem necessidades, então software evoluem.

Criar um software já pensando que será alterado.

O processo de mudança é o mesmo da construção.
O impacto das mudanças vale a pena?

Como fazer mudança em software sem incluir erros?

Deve implementar rastreabilidade para identificar tudo o que uma mudança afeta.
rastreabilidade: verifica a interdependência das funcionalidades
a rastreabilidade nos dá o tamanho da mudança

Matriz de rastreabilidade:
Uma tabela mostrando que existe relação entre componentes.
Pode ter as seguintes colunas: requisito, requisito (dependente), Caso de Uso, Classe, Entidade do BD, arquivo de código, caso de teste

refatoração: metodologia XP
algoritmo com lógica simples, código limpo e fácil de entender

Gerência de configuração: evolução, versões

auditoria de configuração:
um check list do que deve ser observado para saber o processo foi seguido

baseline: todas as partes do software estão na versão correta para liberar uma versão de teste do software
release é um pacote pronto para ser entregue ao cliente

cada projeto tem seus próprios itens de configuração, definidos com base na importância do item para o projeto

Quais produtos impactam em versões futuras?
cronograma não
plano de projeto sim, por ser entregue para o cliente
diagrama de classes sim
histórias de usuário sim
modelo de dados sim
código fonte sim

metodologias de desenvolvimento de software: AGILE, XP, RUP

Capacity Maturity Model Integration (CMMI)
Melhoria de Processo de Software Brasileiro (MPS.Br)
Rational Unified Process (RUP)
Software Process Improvement and Capacty Determination (SPICE)

SCRUM o ciclo de tempo de entregas é fixo
RUP a entrega é regida pelos requisitos, logo, não tem tempo fixo

ciclo de vida do PRODUTO software:
- introdução (é colocado em produção, ou seja, entregue ao usuário)
- crescimento (necessidade da gerencia de configuração)
- maturidade (começa a considerar se melhorias devem ser implementadas)
- declínío (software é descontinuado)

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Programacao-Orientada-a-Objetos_133372.txt

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Sistema-Gerenciador-de-Banco-de-Dados_133379.txt

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Big-Data_133404.txt

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Aplicacoes-Web-e-Moveis

programador recebe um protótipo

Tim Bernard Lee, em 1990, desenvolveu o HTML.
Berners-Lee (citado por Chagas, 2014) afirmava: "Gostei da ideia de que uma informação é realmente definida apenas pelo que está relacionada e como está relacionada. Realmente há pouco mais para o significado. A estrutura é tudo".

box-sizing: border-box; /* faz caber na tela*/

float: left | rigth | none | inherit

elementos block: main, div, h[1-6], p, pre, ul, ol, li, table, form, ...
block: dois seguidos aparecem um abaixo do outro

elementos inline: a, b, i, span, br, img, input, sup, sub, textarea, code, object, 
inline: dois seguidos aparecem um do lado do outro

usar lista para fazer menu
ul, li { display: inline}
list-style-type: none
text-decoration: none

Menu vertical
li, a {display: block}
submenu é uma lista dentro de outra
position: absolute; display: none
horizontal
li {float:left}


<section style="clear: both">

Seletores de tag
E F = Elemento F descendente do
elemento E 
E > F = Elemento F filho do elemento E
E + F = Elemento F imediatamente após
E (irmãos) 
E ~ F = Elemento F após elemento E
(irmãos)
E:firstchild = Elemento E primeiro-filho do seu
elemento-pai
E:lastchild

selector:pseudo-class { color:red}

pseudo-class = :link | :visited | :hover ...
manter a ordem
? :hover mudar a cor do fundo para mostrar validação

pseudo-elementos
::after | ::before | ::first-letter | ::first-line | ::maker | ::selection
Usado para fonte, background

maker: item de lista
selection: quando selecionar o texto

img {
  border-radius: 50%;
  opacity: 0.5;
  display: block; margin: auto; // centraliza
}

seletor {transform: translateX(x); translate(x,y);}

rotate(angulo); scaleX(n); skewX(a);
matrix(scaleX(), scaleY(), skewX(), skewY(), translateX(), translateY() );

exemplo com javascript mudando style tranformação

transition-dalay
transition-duration
transition-property
transition-timing-function

div {
  width: 100px; height: 100px;
  transition: width 2s;
}
#div1 {transition-timing-function: linear | ease | ease-in | ease-out | ease-in-out}
div:hover {width: 300px}

achei melhor o ease-in-out

https://color.adobe.com/create/color-wheel
cor + cor complementar, pois combinam
ideal é usar uma cor mais uma segundária

Elementos estruturais semânticos
topo (header), menu (nav), conteúdo, banner, footer

<section> é apropriado apenas se o conteúdo do elemento for listado explicitamente na estrutura de tópicos do documento
<article>: uma postagem em um blog ou um comentário. Um independe do outro.
<div> como um elemento de último recurso, quando nenhum outro elemento for adequado.

* {box-sizing: border-box;}

.box { background: #FFF; border: 4px solid rgb(16, 1, 1);
border-color: #000; color: #000;}
.container {
 display: grid;
 grid-template-columns: 100px 50px 80px 200px;
 grid-template-rows:80px 100px 100px;
 gap:8px;}
HTML:
<div class="container">
<div class="box">1</div>
<div class="box">2</div>
<div class="box">3</div>
<div class="box">4</div>
<div class="box">5</div>
<div class="box">6</div>
<div class="box">7</div>
<div class="box">8</div>
<div class="box">9</div>
</div>

.container {
  display: grid;
  grid-template-columns: 100px 50px 80px 200px;
  grid-template-rows: 80px 100px 100px;
  gap: 10px;
  // gap: 0 8px; /* espaçamento somente para colunas */ 
}
.box1 {
  grid-column-start: 1;
  grid-column-end: 5;
  grid-row-start: 3;
  grid-row-start: 4;
}
<div class="container">

.container {
display: grid;
grid-template-columns: repeat(6, 100px);
grid-template-rows: repeat(4, 60px);
grid-gap: 5px;
}
.box1 {
grid-column: 2 / span 4;}//começa na coluna 2 e irá ocupar 4 células.
.box2 { grid-row: 3 / span 2;} //começa na linha 3 e irá ocupar 2 células.
.box3 { 
  grid-column: 3 / span 4; //começa na coluna 3 e irá ocupar 4  células.
  grid-row: 3 / span 2; //começa na linha 3 e irá ocupar 2 células.
}

<div class="container">
 <header class="topo">Topo</header>
 <nav class="menu">Menu</nav>
 <main class="principal">Principal</main>
 <aside class="esquerda">aside esquerdo</aside>
 <aside class="direita">aside direito</aside>
 <footer class="rodape">Rodapé</footer>
</div>
No CSS
.container {
 display: grid;
 grid-template-rows: 60px 40px 200px 60px;
 grid-template-areas:
 "topo topo topo"
 "menu menu menu"
 "esquerda principal direita"
 "rodape rodape rodape";
 grid-gap: 5px 10px;
}
.topo {grid-area: topo;}
.menu {grid-area: menu;}
.principal {grid-area: principal;}
.esquerda {grid-area: esquerda;}
.direita {grid-area: direita;}
.rodape {grid-area: rodape;}

4vh (4% da altura da viewport)


Flexbox: layout em linha OU coluna

.container { display: flex; }
flex-direction: row|column|column-reverse;
justify-content: flex-start | flex-end | flex-center | space-between | space-around;
flex-wrap: wrap; /* o valor padrão é nowrap */

@media screen and (min-height: 600px) and (max-height: 768px)
{....}

@media screen and (min-width: 480px) {
  body {
    bac...
  }
}

width: largura da área de saída.
device-width: largura física da área de renderização do dispositivo

width e height são funcionalidades dinâmicas e device-width e device-height são
funcionalidades fixas, pois tratam de medidas de dispositivos físicos.
orientation: os valores possíveis para orientation são landscape e portrait.
Exemplo:
@media screen and (orientation: landscape) {....}

resolution: descreve a resolução, densidade de pixel, no dispositivo do usuário.
Exemplo:
@media screen and (min-resolution: 300dpi) {...} /*dispositivos
com resolução maior que 300 pontos por polegadas*/

Ao fazer as declarações em CSS, a primeira que deve ser declarada é para smartphones, e assim para os demais dispositivos, utilizando o breakpoint.

img com tamanho flexível
<picture>
<source media="(max-width: 750px)" srcset="imagem1.png">
<source media="(max-width: 1050px)" srcset="imagem2.png">
<img src="imagem.png">
</picture>

< div class =" artdirection" alt ="exemplo " > </ div >
CSS
.artdirection {
max-width: 100%;
height: 240px;
border: 5px solid red;
background-image: url(imagens/ img1. jpg);
background-position: top;
}
@media screen and (min-width: 320px) {
.artdirection {
border: 5px solid blue;
background-image: url(imagens/ img2. jpg);
height: 525px;
}
}
@media screen and (min-width: 700px) {
.artdirection {
border: 5px solid green;
background-image: url(imagens/img2. jpg);
height: 750px;
}
}
@media screen and (min-width: 1600px) {
.artdirection {
border: 5px solid black;
background-image: url(imagens/ img3. jpg);
max-width: 1600px;
height: 1200px;
}
}


img {
display: block;
margin: 0, auto;
max-width: 100%;
}

localStorage.setItem("nome", "João");
let nome = localStorage.getItem("nome");

substitui o cookie

